<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Playlist</title>
    <link rel="icon" type="image/png" href="https://res.cloudinary.com/dqfnwh89v/image/upload/v1721653535/Aek_Ads_Fevicon_m0qmmj.png">
    <link rel="stylesheet" href="/css/newPlaylist.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <style>
        .slot {
            border: 2px dashed #ccc;
            width: 100%;
            height: 50px;
            margin: 5px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .slot.over {
            border-color: #0D6EFD;
        }

        .layout-info {
    display: none;
    max-height: 400px; /* Set a maximum height */
    overflow-y: auto; /* Enable vertical scrolling */
    padding-right: 10px; /* Optional: Add some padding for better scroll visibility */
}
    </style>
</head>

<body>
    <div class="newPlaylist">
        <div class="header">
            <button onclick="exitfunction()">Exit</button>
            <button id="previewButton" onclick="previewAlert()">Preview</button> <div class="master-clock">
                    <label for="masterUpdateTime">Master Update Time:</label>
                    <input type="datetime-local" id="masterUpdateTime">
                    <label for="masterDeleteTime">Master Delete Time:</label>
                    <input type="datetime-local" id="masterDeleteTime">
                    <button id="applyMasterTimeButton">Apply to All Slots</button>
                </div>
            <button onclick="selectScreen()">Next</button>
            <div id="videoOverlay">
                <div id="videoContainer">
                    <!-- Videos will be displayed here -->
                </div>
                <button id="closeButton">Close</button>
            </div>
        </div>
        <div class="main">
            <div class="media-sidebar">
                <div class="media-widgets">
                    <p class="media">Media</p>
                    <p class="widgets">Widgets</p>
                </div>
                <div class="search-upload" style="display: none;">
                    <input type="search" name="search" placeholder="Search">
                    <button class="media-btn-upload" id="uploadButton">
                        <svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="15" cy="15" r="15" fill="#0D6EFD" />
                            <path d="M21.75 17.25V20.25C21.75 20.6478 21.592 21.0294 21.3107 21.3107C21.0294 21.592 20.6478 21.75 20.25 21.75H9.75C9.35218 21.75 8.97064 21.592 8.68934 21.3107C8.40804 21.0294 8.25 20.6478 8.25 20.25V17.25" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M18.75 12L15 8.25L11.25 12" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M15 8.25V17.25" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </button>
                    <form id="uploadForm" action="/Dashboard/Playlist/UploadFile" method="POST" enctype="multipart/form-data" style="display: none;">
                        <input type="file" name="file" id="fileInput">
                        <button type="submit" id="submitBtn">Upload</button>
                    </form>
                </div>
                <div class="media-category">
                    <button class="media-all"><a href="/Dashboard/Playlist/newPlaylist">All</a></button>
                    <button class="media-photos" style="display: none;"><a href="/Dashboard/Playlist/Photoes">Photos</a></button>
                    <button class="media-videos" style="display: none;"><a href="/Dashboard/Playlist/Videos">Videos</a></button>
                </div>
                <div class="show-media">
                    <% mediafiles.forEach(function(file) { %>
                    <div class="media-container">
                        <% if (file.type && file.type.startsWith('image/')) { %>
                        <img src="<%= file.url %>" alt="Image" class="media-item image-item" data-url="<%= file.url %>" draggable="true">
                        <% } else if (file.type && file.type.startsWith('video/')) { %>
                        <video controls class="media-item video-item" preload="metadata" data-url="<%= file.url %>" draggable="true">
                            <source src="<%= file.url %>" type="<%= file.type %>">
                            Your browser does not support the video tag.
                        </video>
                        <% } else { %>
                        <p>Unsupported file type: <%= file.type %></p>
                        <% } %>
                    </div>
                    <% }); %>
                </div>
            </div>
            <div class="middle">
                <div>
                    <label for="layoutSelect">Choose Layout:</label>
                    <select id="layoutSelect">
                        <% for (let i = 1; i <= 10; i++) { %>
                            <option value="<%= i %>">Layout <%= i %></option>
                        <% } %>
                    </select>
                    <button id="showLayoutInfoButton">Show Layout Info</button>
                </div>
               
            </div>
            <div class="layout-info" id="layoutInfo">
                <!-- Slots will be dynamically added here -->
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            applyMasterTimeButton.addEventListener('click', function () {
    const updateTime = masterUpdateTime.value;
    const deleteTime = masterDeleteTime.value;

    if (!updateTime && !deleteTime) {
        Swal.fire({
            title: 'Error',
            text: 'Please set both Master Update Time and Delete Time',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return;
    }

    const layoutData = JSON.parse(sessionStorage.getItem('layoutData')) || {};

    for (let layout = 1; layout <= 10; layout++) {
        const startSlot = (layout - 1) * 10 + 1;
        for (let i = startSlot; i < startSlot + 10; i++) {
            if (!layoutData[layout]) {
                layoutData[layout] = {};
            }

            // Apply master update time if it's set
            if (updateTime) {
                layoutData[layout][`slot${i}_updatetime`] = updateTime.replace('T', ' ');
                const updateTimeInput = document.getElementById(`slot${i}_updatetime`);
                if (updateTimeInput) updateTimeInput.value = updateTime;
            }

            // Apply master delete time if it's set
            if (deleteTime) {
                layoutData[layout][`slot${i}_deletetime`] = deleteTime.replace('T', ' ');
                const deleteTimeInput = document.getElementById(`slot${i}_deletetime`);
                if (deleteTimeInput) deleteTimeInput.value = deleteTime;
            }
        }
    }

    sessionStorage.setItem('layoutData', JSON.stringify(layoutData));
    console.log('Applied master times to all slots:', layoutData);
});














            const layoutInfo = document.getElementById('layoutInfo');
            const showLayoutInfoButton = document.getElementById('showLayoutInfoButton');
            const layoutSelect = document.getElementById('layoutSelect');
            const mediaItems = document.querySelectorAll('.media-item');
    
            showLayoutInfoButton.addEventListener('click', function () {
                const selectedLayout = parseInt(layoutSelect.value);
                layoutInfo.innerHTML = ''; // Clear any existing slots
                layoutInfo.style.display = 'block';
                document.querySelector('.master-clock').style.display = 'block';
                loadLayoutData(selectedLayout); // Load data for the selected layout
            });
    
           function updateSlotData(slotIndex, url = null) {
    const selectedLayout = parseInt(layoutSelect.value, 10);
    const startSlot = (selectedLayout - 1) * 10 + 1;
    const slotNumber = startSlot + slotIndex;

    const slot = document.getElementById(`slot${slotNumber}`);
    const updateTimeInput = document.getElementById(`slot${slotNumber}_updatetime`);
    const deleteTimeInput = document.getElementById(`slot${slotNumber}_deletetime`);

    if (!slot || !updateTimeInput || !deleteTimeInput) {
        console.error(`Element(s) not found for slot ${slotNumber}`);
        return;
    }

    const updateTime = formatDateTime(updateTimeInput.value);
    const deleteTime = formatDateTime(deleteTimeInput.value);

    const layoutData = JSON.parse(sessionStorage.getItem('layoutData')) || {};

    if (!layoutData[selectedLayout]) {
        layoutData[selectedLayout] = {};
    }

    console.log(`Updating slot data for slot ${slotNumber}:`, {
        url,
        updateTime,
        deleteTime
    });

    if (url !== null) {
        layoutData[selectedLayout][`slot${slotNumber}`] = `{${url}}`;
        slot.textContent = url;

        // Trigger change event to update the times
        updateTimeInput.dispatchEvent(new Event('change'));
        deleteTimeInput.dispatchEvent(new Event('change'));
    }

    layoutData[selectedLayout][`slot${slotNumber}_updatetime`] = updateTime;
    layoutData[selectedLayout][`slot${slotNumber}_deletetime`] = deleteTime;

    console.log('Updated layoutData:', layoutData);

    sessionStorage.setItem('layoutData', JSON.stringify(layoutData));
}

    
            function deleteSlotData(slotIndex) {
                const selectedLayout = parseInt(layoutSelect.value, 10);
                const startSlot = (selectedLayout - 1) * 10 + 1;
                const slotNumber = startSlot + slotIndex;
    
                const layoutData = JSON.parse(sessionStorage.getItem('layoutData')) || {};
    
                if (layoutData[selectedLayout]) {
                    delete layoutData[selectedLayout][`slot${slotNumber}_url`];
                    delete layoutData[selectedLayout][`slot${slotNumber}_updatetime`];
                    delete layoutData[selectedLayout][`slot${slotNumber}_deletetime`];
                }
    
                console.log(`Deleted data for slot ${slotNumber}`);
                console.log('Updated layoutData:', layoutData);
    
                sessionStorage.setItem('layoutData', JSON.stringify(layoutData));
    
                const slot = document.getElementById(`slot${slotNumber}`);
                if (slot) {
                    slot.textContent = `Slot ${slotNumber}`;
                }
    
                const updateTimeInput = document.getElementById(`slot${slotNumber}_updatetime`);
                const deleteTimeInput = document.getElementById(`slot${slotNumber}_deletetime`);
                if (updateTimeInput) updateTimeInput.value = '';
                if (deleteTimeInput) deleteTimeInput.value = '';
            }
    
            function loadLayoutData(layout) {
                const layoutData = JSON.parse(sessionStorage.getItem('layoutData')) || {};
                console.log('Loading layout data:', layoutData);
    
                const slotsPerLayout = 10; // Number of slots per layout
                const startSlot = (layout - 1) * slotsPerLayout + 1;
                const endSlot = startSlot + slotsPerLayout - 1;
    
                for (let i = startSlot; i <= endSlot; i++) {
                    const slotIndex = i - startSlot; // 0-based index for slot
                    const slotContainer = document.createElement('div');
                    slotContainer.className = 'slot-container';
    
                    const slot = document.createElement('div');
                    slot.className = 'slot';
                    slot.id = `slot${i}`; // Ensure each slot has a unique ID
                    slot.textContent = `Slot ${i}`;
                    slotContainer.appendChild(slot);
    
                    slot.addEventListener('dragover', (e) => {
                        e.preventDefault();
                        slot.classList.add('over');
                    });
    
                    slot.addEventListener('dragleave', () => {
                        slot.classList.remove('over');
                    });
    
                    slot.addEventListener('drop', (e) => {
                        e.preventDefault();
                        slot.classList.remove('over');
    
                        const url = e.dataTransfer.getData('text');
                        slot.textContent = url;
    
                        updateSlotData(slotIndex, url);
                    });
    
                    const updateTimeLabel = document.createElement('label');
                    updateTimeLabel.setAttribute('for', `slot${i}_updatetime`);
                    updateTimeLabel.textContent = `Slot ${i} Update Time:`;
                    slotContainer.appendChild(updateTimeLabel);
    
                    const updateTimeInput = document.createElement('input');
                    updateTimeInput.setAttribute('type', 'datetime-local');
                    updateTimeInput.setAttribute('id', `slot${i}_updatetime`);
                    updateTimeInput.setAttribute('name', `slot${i}_updatetime`);
                    updateTimeInput.addEventListener('change', () => updateSlotData(slotIndex));
                    slotContainer.appendChild(updateTimeInput);
    
                    slotContainer.appendChild(document.createElement('br'));
                    slotContainer.appendChild(document.createElement('br'));
    
                    const deleteTimeLabel = document.createElement('label');
                    deleteTimeLabel.setAttribute('for', `slot${i}_deletetime`);
                    deleteTimeLabel.textContent = `Slot ${i} Delete Time:`;
                    slotContainer.appendChild(deleteTimeLabel);
    
                    const deleteTimeInput = document.createElement('input');
                    deleteTimeInput.setAttribute('type', 'datetime-local');
                    deleteTimeInput.setAttribute('id', `slot${i}_deletetime`);
                    deleteTimeInput.setAttribute('name', `slot${i}_deletetime`);
                    deleteTimeInput.addEventListener('change', () => updateSlotData(slotIndex));
                    slotContainer.appendChild(deleteTimeInput);
    
                    slotContainer.appendChild(document.createElement('br'));
                    slotContainer.appendChild(document.createElement('br'));
    
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = `Delete Slot ${i} Data`;
                    deleteButton.addEventListener('click', () => deleteSlotData(slotIndex));
                    slotContainer.appendChild(deleteButton);
    
                    layoutInfo.appendChild(slotContainer);
    
                    // Load saved data for each slot
                    if (layoutData[layout] && layoutData[layout][`slot${i}_url`]) {
                        const url = layoutData[layout][`slot${i}_url`];
                        const updateTime = layoutData[layout][`slot${i}_updatetime`] || '';
                        const deleteTime = layoutData[layout][`slot${i}_deletetime`] || '';
    
                        slot.textContent = url || `Slot ${i}`;
                        updateTimeInput.value = formatDateTime(updateTime);
                        deleteTimeInput.value = formatDateTime(deleteTime);
                    }
                }
            }
    
            function formatDateTime(datetime) {
                if (!datetime) return '';
                return datetime.replace('T', ' ');
            }
    
            mediaItems.forEach(mediaItem => {
                mediaItem.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text', e.target.dataset.url);
                });
            });
    
            document.getElementById('uploadButton').addEventListener('click', () => {
                document.getElementById('uploadForm').style.display = 'block';
            });
    
            document.getElementById('closeButton').addEventListener('click', () => {
                document.getElementById('videoOverlay').style.display = 'none';
            });
    
            function previewAlert() {
                Swal.fire({
                    title: 'Preview',
                    text: 'This is a preview alert',
                    icon: 'info',
                    confirmButtonText: 'OK'
                });
            }
    
            function selectScreen() {
                window.location.href = "/Dashboard/Playlist/newPlaylist/selectScreens";
            }
            window.selectScreen = selectScreen;
    
            function exitfunction() {
                window.location.href = '/Dashboard';
            }
        });
    </script>
    
    
    
</body>

</html>
